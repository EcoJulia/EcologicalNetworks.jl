var documenterSearchIndex = {"docs":
[{"location":"#EcologicalNetworks-1","page":"Index","title":"EcologicalNetworks","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"This package provides a common interface for the analysis of ecological networks, using julia. It is very opinionated about the \"right\" way to do things, but we have documented our opinions in several publications (see the references at the bottom of this page).","category":"page"},{"location":"#","page":"Index","title":"Index","text":"The package is built around a typesystem for networks, which is intended to capture the different types of data and communities ecologists need to handle. This makes the package extensible, both by writing additional methods with a very fine-tuned dispatch, or by adding additional types that should work out of the box (or be very close to).","category":"page"},{"location":"#","page":"Index","title":"Index","text":"This package is a library for the analysis of ecological networks. On purpose, we do not provide \"wrapper\"-type functions that would perform an entire analysis. We experimented with this idea during development, and rapidly realized that even for the most simple research project, we needed to make small tweaks that made the wrappers a nuisance. We decided to give you lego blocks, and it's your job to build the kick-ass spaceship.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"We tried to avoid making the package into yet another Domain Specific Language. This means that when an operation should be expressed using the julian syntax, we made it this way. Transforming networks from a type to another is done with convert. Random networks are drawn with rand. Swapping of interactions is done with shuffle. There is support for slicing of networks, as well as the entire operations on sets. A lot of methods from Base have been overloaded, and this should make the code easy to write and read.","category":"page"},{"location":"#Why-should-I-use-this-package?-1","page":"Index","title":"Why should I use this package?","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"It offers a single interface to analyse almost all type of networks for ecology. It's somewhat fast (very specialized packages are likely to be faster). It's built around the very best practices in network analysis. We think the type system is very cool. It's very well tested and adequately documented. We used it for research and teaching for months before releasing it. It's actively maintained and we will keep adding functionalities.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"You don't have to use it if you don't want to.","category":"page"},{"location":"#But-it-doesn't-even-make-figures!-1","page":"Index","title":"But it doesn't even make figures!","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"The code for network visualization is in a companion package named EcologicalNetworksPlots. There are two reasons for this decision.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"First, network visualization, although attractive, is not necessary for network analysis. It can help, but given the wrong network layout technique, it can also introduce biases. When the volume of networks increased, we found that visualization became less and less informative. Because it is not strictly speaking a tool for analysis, it is not part of this package.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"Second, it helps to keep software dependency small. Most of our work using this package is done on clusters of one sort of the other, and having fewer dependencies means that installation is easier.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"EcologicalNetworksPlots can be installed as with any other Julia package. It is documented on this website.","category":"page"},{"location":"#And-worse,-you-forgot-my-favorite-method!-1","page":"Index","title":"And worse, you forgot my favorite method!","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"Yeah, about that. We probably didn't.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"A lot of methods were considered for inclusion in the package, but ultimately discarded because we were not 100% confident in their robustness, reliability, validity, or interpretation. As we said, the package is very opinionated about the right way to do things, and new functions require more time for maintenance and testing; it makes sense for us to focus on things we trust.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"If your favorite measure or method is missing, there are two solutions. First, this package is essentially a library of functions to build network analyses, so you can use this to create a function that does what you want. For example, if you want to take the square root of a quantitative network, you can overload the √ method from base this way:","category":"page"},{"location":"#","page":"Index","title":"Index","text":"import Base: √\n\nfunction √(N::T) where {T <: QuantitativeNetwork}\n  # Take the square root of the interaction strength\n  sqrt_matrix = sqrt.(N.A)\n  # Return a new network with the correct types\n  return T(sqrt_matrix, EcologicalNetworks.species_objects(N)...)\nend","category":"page"},{"location":"#","page":"Index","title":"Index","text":"The second solution (which is actually a second step after you have been writing your own method), is to submit a pull request to the package, to have your new methods available in the next release. Currently, we will be very selective about which methods are added (because every line of code needs to be maintained).","category":"page"},{"location":"#References-1","page":"Index","title":"References","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"About the analysis of ecological networks in general, the package covers (or will cover over time) most of the measures we identified as robust in the following publication:","category":"page"},{"location":"#","page":"Index","title":"Index","text":"Delmas, Eva, Mathilde Besson, Marie-Hélène Brice, Laura A. Burkle, Giulio V. Dalla Riva, Marie-Josée Fortin, Dominique Gravel, et al. « Analysing Ecological Networks of Species Interactions ». Biological Reviews (2018), 112540. https://doi.org/10.1111/brv.12433.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"We highly recommend we keep it nearby when using the package. A lot of decisions taken during development are grounded in the analysis of the literature we conducted over a few years.","category":"page"},{"location":"#Network-β-diversity-1","page":"Index","title":"Network β-diversity","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"The analysis of network dissimilarity is done exactly as described in:","category":"page"},{"location":"#","page":"Index","title":"Index","text":"Poisot, Timothée, Elsa Canard, David Mouillot, Nicolas Mouquet, and Dominique Gravel. “The Dissimilarity of Species Interaction Networks.” Ecology Letters 15, no. 12 (2012): 1353–1361. https://doi.org/10.1111/ele.12002.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"The measures for β-diversity (and the approach of partitioning variation in sets) is done exactly as described in:","category":"page"},{"location":"#","page":"Index","title":"Index","text":"Koleff, Patricia, Kevin J. Gaston, and Jack J. Lennon. “Measuring Beta Diversity for Presence–absence Data.” Journal of Animal Ecology 72, no. 3 (2003): 367–82. https://doi.org/10.1046/j.1365-2656.2003.00710.x.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"The functions presented in their table are implemented as KGLXX, where XX is the number of the function on two digits (i.e. the second measure of β-diversity is KGL02).","category":"page"},{"location":"#Specificity-1","page":"Index","title":"Specificity","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"Poisot, Timothee, Elsa Canard, Nicolas Mouquet, and Michael E Hochberg. “A Comparative Study of Ecological Specialization Estimators.” Methods in Ecology and Evolution 3, no. 3 (2012): 537–44. https://doi.org/10.1111/j.2041-210X.2011.00174.x.","category":"page"},{"location":"#Probabilistic-networks-1","page":"Index","title":"Probabilistic networks","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"Poisot, Timothée, Alyssa R. Cirtwill, Kévin Cazelles, Dominique Gravel, Marie-Josée Fortin, and Daniel B. Stouffer. “The Structure of Probabilistic Networks.” Methods in Ecology and Evolution 7, no. 3 (2016): 303–12. https://doi.org/10.1111/2041-210X.12468.","category":"page"},{"location":"#Overlap-and-complementarity-1","page":"Index","title":"Overlap and complementarity","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"Gao, Peng, et John A. Kupfer. « Uncovering food web structure using a novel trophic similarity measure ». Ecological Informatics 30 (2015): 110‑18. https://doi.org/10.1016/j.ecoinf.2015.09.013.","category":"page"},{"location":"#How-can-I-contribute?-1","page":"Index","title":"How can I contribute?","text":"","category":"section"},{"location":"#","page":"Index","title":"Index","text":"Good question!","category":"page"},{"location":"#","page":"Index","title":"Index","text":"The easiest way to contribute is to use the package, and [open an issue][issue] whenever you can't manage to do something, think the syntax is not clear, or the documentation is confusing. This is seriously one of the best ways to help.","category":"page"},{"location":"#","page":"Index","title":"Index","text":"[issue]: https://github.com/PoisotLab/EcologicalNetworks.jl/issues","category":"page"},{"location":"#","page":"Index","title":"Index","text":"If you want to contribute code, you can fork this repository, and start adding the functions you want, or changing the code. Please work from the develop branch (master does not accept pull requests except from maintainers, and cannot be pushed to unless a series of conditions are met). It's better if all of your code is tested and documented, but we will work with you when receiving the pull request anyways.","category":"page"},{"location":"interface/types/#Types-of-networks-1","page":"Types","title":"Types of networks","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"One feature of EcologicalNetwork which makes the rest of the package works is the type system to represent networks. This is not the most enthralling reading, but this pacge will walk you through the different options, and discuss how and when to use them.","category":"page"},{"location":"interface/types/#Network-representation-1","page":"Types","title":"Network representation","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"All networks types have a field A to store the adjacency matrix, and fields S, or T and B, for species in unipartite and bipartite networks respectively. A is always a two-dimensional array (see below for more information), where interactions go from the rows, to the columns. Network types are mutable. Operations that will modify the network end with a !, as is the julian convention.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"Fields S, T, and B are one-dimensional arrays of AllowedSpeciesTypes – they currently can be String or Symbol, and represent the species/nodes names. Future allowed types will be added in later releases.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"You should never have to manipulate the network by calling its fields directly. The species function will give you access to the species, and the network slicing operations (see later sections) will let you access subset of the network / individual interactions / set of neighbours.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"Network types are iterable: this is equivalent to calling the interactions function on a network. On small networks, interactions is faster. On large networks, it can be less true, and using the iteration approach can save some time. The iteration protocol is the same as for all other Julia collections:","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"for (int_number, interaction) in N\n  @info \"Interaction $(int_number) -- $(interaction)\"\nend","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"The objects returned by the iteration protocol are named tuples with fields to and from (always), and can have additional fields probability and strength.","category":"page"},{"location":"interface/types/#Partiteness-1","page":"Types","title":"Partiteness","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"In unipartite networks, the adjancency matrix A is square, and has as many rows/columns as there are elements in S. This is always checked and enforced upon construction of the object, so you cannot have a mismatch.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"In bipartite networks, the matrix A is not necessarily square, and has dimensions equal to the lengths of T (rows) and B (columns). This too is checked upon construction.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"All elements in S must be unique (no duplicate node names). In addition, all names in the union of T and B must be unique too (so that when a bipartite network is cast to a unipartite one, the constraint on unique names in S is respected).","category":"page"},{"location":"interface/types/#Type-of-information-1","page":"Types","title":"Type of information","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"At all points, you can have a look at the types of the interactions and the species objects – the next entries in this documentation give additional information about the types allowed.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"eltype","category":"page"},{"location":"interface/types/#Base.eltype","page":"Types","title":"Base.eltype","text":"eltype(N::BipartiteNetwork{IT,ST}) where {IT,ST}\n\nReturns a tuple with the type of the interactions, and the type of the species.\n\n\n\n\n\neltype(N::UnipartiteNetwork{IT,ST}) where {IT,ST}\n\nReturns a tuple with the type of the interactions, and the type of the species.\n\n\n\n\n\neltype(N::BipartiteProbabilisticNetwork{IT,ST}) where {IT,ST}\n\nReturns a tuple with the type of the interactions, and the type of the species.\n\n\n\n\n\neltype(N::UnipartiteProbabilisticNetwork{IT,ST}) where {IT,ST}\n\nReturns a tuple with the type of the interactions, and the type of the species.\n\n\n\n\n\neltype(N::BipartiteQuantitativeNetwork{IT,ST}) where {IT,ST}\n\nReturns a tuple with the type of the interactions, and the type of the species.\n\n\n\n\n\neltype(N::UnipartiteQuantitativeNetwork{IT,ST}) where {IT,ST}\n\nReturns a tuple with the type of the interactions, and the type of the species.\n\n\n\n\n\n","category":"function"},{"location":"interface/types/#Union-types-1","page":"Types","title":"Union types","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"All networks are grouped upon the AbstractEcologicalNetwork type:","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"AbstractEcologicalNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.AbstractEcologicalNetwork","page":"Types","title":"EcologicalNetworks.AbstractEcologicalNetwork","text":"All networks in the package belong to the AbstractEcologicalNetwork type. They all have a field A to represent interactions as a matrix, and a number of fields for species. See the documentation for AbstractBipartiteNetwork and AbstractUnipartiteNetwork, as well as AllowedSpeciesTypes for the allowed types for species.\n\nNote that all species in a network (including both levels of a bipartite network) must have the same type. For example, [\"a\", :b, \"c\"] is not a valid array of species, as not all its elements have the same type.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#","page":"Types","title":"Types","text":"The type of nodes that are allowed is determined by the non-exported EcologicalNetworks.is_valid_species function. To allow an additional type of node, you can write the following:","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"\nstruct Foo\n  name::AbstractString\n  bar::AbstractFloat\nend\n\nimport EcologicalNetworks\nEcologicalNetworks.is_valid_species(::Type{Foo}) = true","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"Note that integers are never valid species identifiers. By default, String and Symbol are used.","category":"page"},{"location":"interface/types/#By-partiteness-1","page":"Types","title":"By partiteness","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"AbstractBipartiteNetwork\nAbstractUnipartiteNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.AbstractBipartiteNetwork","page":"Types","title":"EcologicalNetworks.AbstractBipartiteNetwork","text":"This abstract type groups all bipartite networks, regardless of the type of information. Bipartite networks have two fields for species, named T (for top, corresponding to matrix rows), and B (for bottom, matrix columns).\n\nAny bipartite network can be declared (we'll use the example of a binary network) either using BipartiteNetwork(A, T, B) (assuming A is a matrix of interactions and T and B are vectors of species names for the top and bottom level), or BipartiteNetwork(A), in which case the species will be named automatically.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.AbstractUnipartiteNetwork","page":"Types","title":"EcologicalNetworks.AbstractUnipartiteNetwork","text":"This abstract type groups all unipartite networks, regardless of the type of information. Unipartite networks have a single field for species, named S, which has the same number of elements as the size of the matrix.\n\nAny unipartite network can be declared (we'll use the example of a binary network) either using UnipartiteNetwork(A, S) (assuming A is a matrix of interactions and S is a vector of species names), or UnipartiteNetwork(A), in which case the species will be named automatically.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#By-interaction-type-1","page":"Types","title":"By interaction type","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"BinaryNetwork\nQuantitativeNetwork\nProbabilisticNetwork\nDeterministicNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.BinaryNetwork","page":"Types","title":"EcologicalNetworks.BinaryNetwork","text":"This is a union type for both Bipartite and Unipartite deterministic networks. All networks from these class have adjacency matrices represented as arrays of Boolean values.\n\n\n\n\n\n","category":"constant"},{"location":"interface/types/#EcologicalNetworks.QuantitativeNetwork","page":"Types","title":"EcologicalNetworks.QuantitativeNetwork","text":"This is a union type for both unipartite and bipartite quantitative networks. All networks of this type have adjancency matrices as two-dimensional arrays of numbers.\n\n\n\n\n\n","category":"constant"},{"location":"interface/types/#EcologicalNetworks.ProbabilisticNetwork","page":"Types","title":"EcologicalNetworks.ProbabilisticNetwork","text":"This is a union type for both Bipartite and Unipartite probabilistic networks. Probabilistic networks are represented as arrays of floating point values ∈ [0;1].\n\n\n\n\n\n","category":"constant"},{"location":"interface/types/#EcologicalNetworks.DeterministicNetwork","page":"Types","title":"EcologicalNetworks.DeterministicNetwork","text":"All non-probabilistic networks\n\n\n\n\n\n","category":"constant"},{"location":"interface/types/#List-of-available-types-1","page":"Types","title":"List of available types","text":"","category":"section"},{"location":"interface/types/#","page":"Types","title":"Types","text":"These are the types that you actually declare and use. They are presented last because it is easier to understand what they are when you get a sense for the different union types.","category":"page"},{"location":"interface/types/#","page":"Types","title":"Types","text":"UnipartiteNetwork\nBipartiteNetwork\nUnipartiteQuantitativeNetwork\nBipartiteQuantitativeNetwork\nUnipartiteProbabilisticNetwork\nBipartiteProbabilisticNetwork","category":"page"},{"location":"interface/types/#EcologicalNetworks.UnipartiteNetwork","page":"Types","title":"EcologicalNetworks.UnipartiteNetwork","text":"An unipartite deterministic network is a matrix of boolean values.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.BipartiteNetwork","page":"Types","title":"EcologicalNetworks.BipartiteNetwork","text":"A bipartite deterministic network is a matrix of boolean values.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.UnipartiteQuantitativeNetwork","page":"Types","title":"EcologicalNetworks.UnipartiteQuantitativeNetwork","text":"A unipartite quantitative network is a square matrix of numbers.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.BipartiteQuantitativeNetwork","page":"Types","title":"EcologicalNetworks.BipartiteQuantitativeNetwork","text":"A bipartite quantitative network is matrix of numbers. It is assumed that the interaction strength are positive.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.UnipartiteProbabilisticNetwork","page":"Types","title":"EcologicalNetworks.UnipartiteProbabilisticNetwork","text":"A unipartite probabilistic network is a square matrix of floating point numbers, all of which must be between 0 and 1.\n\n\n\n\n\n","category":"type"},{"location":"interface/types/#EcologicalNetworks.BipartiteProbabilisticNetwork","page":"Types","title":"EcologicalNetworks.BipartiteProbabilisticNetwork","text":"A bipartite probabilistic network is a matrix of floating point numbers, all of which must be between 0 and 1.\n\n\n\n\n\n","category":"type"},{"location":"interface/conversions/#Conversions-1","page":"Conversions","title":"Conversions","text":"","category":"section"},{"location":"interface/conversions/#","page":"Conversions","title":"Conversions","text":"Conversions between types are used to perform two usual operations: make a bipartite network unipartite, and remove quantitative information. There are two high-level functions which work by using the union types, and a series of type-to-type functions (the later should be avoided, and exists only to make the high-level functions work).","category":"page"},{"location":"interface/conversions/#","page":"Conversions","title":"Conversions","text":"convert","category":"page"},{"location":"interface/conversions/#Base.convert","page":"Conversions","title":"Base.convert","text":"convert(::Type{UnipartiteNetwork}, N::T) where {T <: BipartiteNetwork}\n\nProjects a deterministic bipartite network in its unipartite representation.\n\n\n\n\n\nconvert(::Type{UnipartiteProbabilisticNetwork}, N::T) where {T <: BipartiteProbabilisticNetwork}\n\nProjects a probabilistic bipartite network in its unipartite representation.\n\n\n\n\n\nconvert(::Type{UnipartiteQuantitativeNetwork}, N::T) where {T <: BipartiteQuantitativeNetwork}\n\nProjects a quantitative bipartite network in its unipartite representation.\n\n\n\n\n\nconvert(::Type{UnipartiteNetwork}, N::T) where {T <: UnipartiteQuantitativeNetwork}\n\nConvert a unipartite quantitative network to a unipartite binary network. This amounts to removing the quantitative information.\n\n\n\n\n\nconvert(::Type{BipartiteNetwork}, N::T) where {T <: BipartiteQuantitativeNetwork}\n\nConvert a bipartite quantitative network to a bipartite binary network. This amounts to removing the quantitative information.\n\n\n\n\n\nconvert(::Type{AbstractUnipartiteNetwork}, N::AbstractBipartiteNetwork)\n\nProjects any bipartite network in its unipartite representation. This function will call the correct type-to-type convert function depending on the type of the input network.\n\nThe type to be converted to must be AbstractUnipartiteNetwork – for example, converting a bipartite probabilistic network to a probabilistic unipartite network is not a meaningful operation.\n\n\n\n\n\nconvert(::Type{BinaryNetwork}, N::QuantitativeNetwork)\n\nProjects any bipartite network in its unipartite representation. This function will call the correct type-to-type convert function depending on the type of the input network.\n\nThis function does not work for probabilistic networks. The operation of generating a deterministic network from a probabilistic one is different from a simple conversion: it can be done either through random draws, or by selecting only interactions with a probability greater than 0 (N>0.0 will do this).\n\n\n\n\n\nconvert(::Type{BipartiteNetwork}, N::T) where {T <: UnipartiteNetwork}\n\nProjects a unipartite network (specifically, a BipartiteNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\nconvert(::Type{BipartiteProbabilisticNetwork}, N::T) where {T <: UnipartiteProbabilisticNetwork}\n\nProjects a unipartite network (specifically, a BipartiteProbabilisticNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\nconvert(::Type{BipartiteQuantitativeNetwork}, N::T) where {T <: UnipartiteQuantitativeNetwork}\n\nProjects a unipartite network (specifically, a BipartiteQuantitativeNetwork) to its bipartite representation. The following checks are performed.\n\nFirst, the network cannot be degenerate, since species with no interactions cannot be assigned to a specific level. Second, the species cannot have both in and out degree. If these conditions are met, the bipartite network will be returned.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Core-functions-1","page":"Core functions","title":"Core functions","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"This page presents the core functions to manipulate networks. Whenever possible, the approach of EcologicalNetworks is to overload functions from Base.","category":"page"},{"location":"interface/highlevel/#Accessing-species-1","page":"Core functions","title":"Accessing species","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"species","category":"page"},{"location":"interface/highlevel/#EcologicalNetworks.species","page":"Core functions","title":"EcologicalNetworks.species","text":"species(N::AbstractBipartiteNetwork)\n\nReturns an array of all species in a bipartite network. The order of the species corresponds to the order of rows (top level) and columns (bottom level) of the adjacency matrix, in this order.\n\n\n\n\n\nspecies(N::AbstractUnipartiteNetwork; dims::Int64=1)\n\nReturns an array of species on either side of a unipartite network. In a unipartite network, species are the same on either size. This function is nevertheless useful when you want to write code that takes either side of the network in a general way.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Accessing-interactions-1","page":"Core functions","title":"Accessing interactions","text":"","category":"section"},{"location":"interface/highlevel/#Presence-of-an-interaction-1","page":"Core functions","title":"Presence of an interaction","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"has_interaction\ninteractions","category":"page"},{"location":"interface/highlevel/#EcologicalNetworks.has_interaction","page":"Core functions","title":"EcologicalNetworks.has_interaction","text":"has_interaction{(N::AbstractEcologicalNetwork, i::NT, j::NT)\n\nThis function returns true if the interaction between i and j is not 0. This refers to species by their names/values, and is the recommended way to test for the presence of an interaction.\n\nUse N[i,j] if you need to get the value of the interaction.\n\n\n\n\n\nhas_interaction(N::AbstractEcologicalNetwork, i::Int64, j::Int64)\n\nThis function returns true if the interaction between i and j is not 0. This refers to species by their position instead of their name, and is not recommended as the main solution. This is used internally by a few functions, but is exported because it may be of general use.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#EcologicalNetworks.interactions","page":"Core functions","title":"EcologicalNetworks.interactions","text":"interactions(N::AbstractEcologicalNetwork)\n\nReturns the interactions in the ecological network. Interactions are returned as an array of named tuples. A minima, these have fields from and to. For networks that are probabilistic, there is a probability field. For networks that are quantitative, there is a strength field. This functions allows to iterate over interactions in a network in a convenient way.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Network-slices-1","page":"Core functions","title":"Network slices","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"getindex","category":"page"},{"location":"interface/highlevel/#Base.getindex","page":"Core functions","title":"Base.getindex","text":"getindex(N::AbstractEcologicalNetwork, i::T, j::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex(N::AbstractEcologicalNetwork, i::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex(N::AbstractEcologicalNetwork, ::Colon, j::T)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex(N::AbstractEcologicalNetwork, i::T, ::Colon)\n\nGet the value of an interaction based on the position of the species.\n\n\n\n\n\ngetindex{T}(N::AbstractEcologicalNetwork, s1::T, s2::T)\n\nGet the value of an interaction based on the name of the species. This is the recommended way to look for things in a network.\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, ::Colon, sp::T)\n\nGets the predecessors (i.e. species that interacts with / consume) of a focal species. This returns the list of species as a Set object, in which ordering is unimportant.\n\n\n\n\n\ngetindex{T}(N::AbstractEcologicalNetwork, sp::T, ::Colon)\n\nGets the successors (i.e. species that are interacted with / consumed) of a focal species. This returns the list of species as a Set object, in which ordering is unimportant.\n\n\n\n\n\ngetindex{T}(N::AbstractUnipartiteNetwork, sp::Array{T})\n\nInduce a unipartite network based on a list of species, all of which must be in the original network. This function takes a single argument (as opposed to two arrays, or an array and a colon) to ensure that the returned network is unipartite.\n\nThe network which is returned by this function may not have the species in the order specified by the user for performance reasons.\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, ::Colon, sp::Array{T})\n\nTODO\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, sp::Array{T}, ::Colon)\n\nTODO\n\n\n\n\n\ngetindex{T}(N::AbstractBipartiteNetwork, sp1::Array{T}, sp2::Array{T})\n\nTODO\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Random-network-samples-1","page":"Core functions","title":"Random network samples","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"sample","category":"page"},{"location":"interface/highlevel/#StatsBase.sample","page":"Core functions","title":"StatsBase.sample","text":"sample(N::T, n::Int64) where {T<:AbstractUnipartiteNetwork}\n\nSamples a sub-network from a unipartite network. n is the number of species to have in the sampled network. This functions makes no attempt to ensure that the network is not degenerate, or even has a single interaction. This is the recommended way to sample a unipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64}) where {T<:AbstractUnipartiteNetwork}\n\nSame as sample, but work when called with (n,) instead of a species number. This is an accepted way to sample a unipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64,Int64}) where {T<:AbstractUnipartiteNetwork}\n\nSame as sample but called with (n,n) instead of a species number. Note that this will fail if the size requested is not square. This is not a really good way to sample a unipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64}) where {T<:AbstractBipartiteNetwork}\n\nSame as sample but with a single species number given as (n,), to return a bipartite network of equal richness on both sides. This is not a very good way to sample a bipartite network.\n\n\n\n\n\nsample(N::T, n::Int64) where {T<:AbstractBipartiteNetwork}\n\nSame thing as sample but with a single species number, to return a bipartite network of equal richness on both sides. This is not a very good way to sample a bipartite network.\n\n\n\n\n\nsample(N::T, n::Tuple{Int64,Int64}) where {T<:AbstractBipartiteNetwork}\n\nSamples a sub-network from a bipartite network. n is the size of the network to return, i.e. number of top and bottom species. This functions makes no attempt to ensure that the network is not degenerate, or even has a single interaction.\n\nThis is the recommended way to sample a bipartite network.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Network-utilities-1","page":"Core functions","title":"Network utilities","text":"","category":"section"},{"location":"interface/highlevel/#Network-size-1","page":"Core functions","title":"Network size","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"size","category":"page"},{"location":"interface/highlevel/#Base.size","page":"Core functions","title":"Base.size","text":"size(N::AbstractEcologicalNetwork)\n\nReturn the size of the adjacency matrix of an AbstractEcologicalNetwork object.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Species-richness-1","page":"Core functions","title":"Species richness","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"richness","category":"page"},{"location":"interface/highlevel/#EcologicalNetworks.richness","page":"Core functions","title":"EcologicalNetworks.richness","text":"richness(N::AbstractEcologicalNetwork, i::Int64)\n\nReturns the number of species on either side of the network. The value of i can be 1 (top-level species) or 2 (bottom-level species), as in the species function.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Changing-network-shape-1","page":"Core functions","title":"Changing network shape","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"permutedims\nnodiagonal\nnodiagonal!","category":"page"},{"location":"interface/highlevel/#Base.permutedims","page":"Core functions","title":"Base.permutedims","text":"permutedims(N::AbstractBipartiteNetwork)\n\nTranposes the network and returns a copy\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#EcologicalNetworks.nodiagonal","page":"Core functions","title":"EcologicalNetworks.nodiagonal","text":"nodiagonal(N::AbstractUnipartiteNetwork)\n\nReturns a copy of the network with its diagonal set to zero.\n\n\n\n\n\nnodiagonal(N::AbstractBipartiteNetwork)\n\nReturns a copy of the network (because the diagonal of a bipartite network is never a meaningful notion). This function is clearly useless, but allows to write general code for all networks types when a step requires removing the diagonal.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#EcologicalNetworks.nodiagonal!","page":"Core functions","title":"EcologicalNetworks.nodiagonal!","text":"nodiagonal!(N::AbstractUnipartiteNetwork)\n\nModifies the network so that its diagonal is set to the appropriate zero.\n\n\n\n\n\nnodiagonal!(N::AbstractBipartiteNetwork)\n\nDoes nothing.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Invert-interactions-1","page":"Core functions","title":"Invert interactions","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"Base.:!","category":"page"},{"location":"interface/highlevel/#Base.:!","page":"Core functions","title":"Base.:!","text":"Base.:!{T<:DeterministicNetwork}(N::T)\n\nReturns the inverse of a binary network – interactions that were false become true, and conversely.\n\n\n\n\n\n","category":"function"},{"location":"interface/highlevel/#Modify-interactions-1","page":"Core functions","title":"Modify interactions","text":"","category":"section"},{"location":"interface/highlevel/#","page":"Core functions","title":"Core functions","text":"setindex!","category":"page"},{"location":"interface/highlevel/#Base.setindex!","page":"Core functions","title":"Base.setindex!","text":"setindex!(N::T, A::Any, i::E, j::E) where {T <: AbstractEcologicalNetwork, E}\n\nChanges the value of the interaction at the specificied position, where i and j are species names. Note that this operation changes the network.\n\n\n\n\n\nsetindex!(N::T, A::K, i::E, j::E) where {T <: AbstractEcologicalNetwork, K <: first(eltype(N)), E <: Int}\n\nChanges the value of the interaction at the specificied position, where i and j are species positions. Note that this operation changes the network.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Links,-degree,-connectance-1","page":"Links","title":"Links, degree, connectance","text":"","category":"section"},{"location":"properties/links/#Connectance-and-number-of-links-1","page":"Links","title":"Connectance and number of links","text":"","category":"section"},{"location":"properties/links/#","page":"Links","title":"Links","text":"sum\nlinks\nconnectance\nlinkage_density","category":"page"},{"location":"properties/links/#Base.sum","page":"Links","title":"Base.sum","text":"sum(N::AbstractEcologicalNetwork)\n\nThis function will return the sum of all interactions in the network. For quantitative networks, this is the sum of interaction strengths. For binary networks, this is the number of interactions. For probabilistic networks, this is the expected number of realized interactions.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.links","page":"Links","title":"EcologicalNetworks.links","text":"links(N::BinaryNetwork)\n\nNumber of non-zero interactions in a deterministic network.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\nlinks(N::QuantitativeNetwork)\n\nNumber of non-zero interactions in a quantitative network (use sum to get the sum of interaction strengths).\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\nlinks(N::ProbabilisticNetwork)\n\nExpected number of interactions in a probabilistic network. To get the number of interactions that have a non-zero probability, use e.g. links(N>0.0).\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.connectance","page":"Links","title":"EcologicalNetworks.connectance","text":"connectance(N::AbstractEcologicalNetwork)\n\nNumber of links divided by the number of possible interactions. In unipartite networks, this is LS^2. In bipartite networks, this is L(T  B). It is worth noting that while the maximal connectance is always 1 (i.e. the graph is complete), the minimum value (assuming that the network is not degenerate) is not 0. Instead, the minimum number of interactions in a unipartite network is S-1, and in a bipartite network it is max(T,B).\n\nConnectance can therefore be transformed between 0 and 1, using the following approach: let m be the minimum number of interactions, and Co be the measured connectance, then the corrected value is (Co-m)/(1-m). To our best knowledge, this is not standard practice, and therefore is not suggested as a function in the package.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\nMartinez, N.D., 1992. Constant Connectance in Community Food Webs. The American Naturalist 139, 1208–1218.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.linkage_density","page":"Links","title":"EcologicalNetworks.linkage_density","text":"linkage_density(N::AbstractEcologicalNetwork)\n\nNumber of links divided by species richness.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nDunne, J.A., 2006. The Network Structure of Food Webs, in: Dunne, J.A., Pascual, M. (Eds.), Ecological Networks: Linking Structure and Dynamics. Oxford University Press, pp. 27–86.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Degree-1","page":"Links","title":"Degree","text":"","category":"section"},{"location":"properties/links/#","page":"Links","title":"Links","text":"degree","category":"page"},{"location":"properties/links/#EcologicalNetworks.degree","page":"Links","title":"EcologicalNetworks.degree","text":"degree(N::AbstractEcologicalNetwork; dims::Union{Nothing,Integer}=nothing)\n\nReturns the degrees of nodes in a network; dims can be 1 for out degree, or 2 for in degree.\n\nReferences\n\nDelmas, E., Besson, M., Brice, M.-H., Burkle, L.A., Dalla Riva, G.V., Fortin, M.-J., Gravel, D., Guimarães, P.R., Hembry, D.H., Newman, E.A., Olesen, J.M., Pires, M.M., Yeakel, J.D., Poisot, T., 2018. Analysing ecological networks of species interactions. Biological Reviews 112540. https://doi.org/10.1111/brv.12433\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\nWilliams, R.J., 2011. Biology, Methodology or Chance? The Degree Distributions of Bipartite Ecological Networks. PLoS One 6, e17645. https://doi.org/10.1371/journal.pone.0017645\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#","page":"Links","title":"Links","text":"degree_var","category":"page"},{"location":"properties/links/#EcologicalNetworks.degree_var","page":"Links","title":"EcologicalNetworks.degree_var","text":"degree_var(N::ProbabilisticNetwork; dims::Union{Nothing,Integer}=nothing)\n\nVariance in the degree of species in a probabilistic network.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Species-without-interactions-1","page":"Links","title":"Species without interactions","text":"","category":"section"},{"location":"properties/links/#","page":"Links","title":"Links","text":"isdegenerate\nsimplify!\nsimplify","category":"page"},{"location":"properties/links/#EcologicalNetworks.isdegenerate","page":"Links","title":"EcologicalNetworks.isdegenerate","text":"isdegenerate(N::AbstractEcologicalNetwork)\n\nNetworks are called degenerate if some species have no interactions, either at all, or with any species other than themselves. This is particularly useful to decide the networks to keep when generating samples for null models.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.simplify!","page":"Links","title":"EcologicalNetworks.simplify!","text":"simplify!{T<:AbstractBipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\nsimplify!(N::AbstractUnipartiteNetwork)\n\nModifies the network to drop all species without an interaction.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#EcologicalNetworks.simplify","page":"Links","title":"EcologicalNetworks.simplify","text":"simplify{T<:AbstractBipartiteNetwork}(N::T)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\nsimplify(N::AbstractUnipartiteNetwork)\n\nReturns a new network in which species with no interactions have been removed.\n\n\n\n\n\n","category":"function"},{"location":"properties/links/#Species-level-specificity-1","page":"Links","title":"Species-level specificity","text":"","category":"section"},{"location":"properties/links/#","page":"Links","title":"Links","text":"specificity","category":"page"},{"location":"properties/links/#EcologicalNetworks.specificity","page":"Links","title":"EcologicalNetworks.specificity","text":"specificity(N::DeterministicNetwork)\n\nMeasure of specificity in a deterministic network. This returns a value between 0 and 1, where 1 indicates maximal specificity.\n\nReferences\n\nPoisot, T., Bever, J.D., Nemri, A., Thrall, P.H., Hochberg, M.E., 2011. A conceptual framework for the evolution of ecological specialisation. Ecol. Lett. 14, 841–851. https://doi.org/10.1111/j.1461-0248.2011.01645.x\n\nPoisot, T., Canard, E., Mouquet, N., Hochberg, M.E., 2012. A comparative study of ecological specialization estimators. Methods in Ecology and Evolution 3, 537–544. https://doi.org/10.1111/j.2041-210X.2011.00174.x\n\n\n\n\n\nspecificity(N::QuantitativeNetwork)\n\nMeasure of specificity in a quantitative network. This returns a value between 0 and 1, where 1 indicates maximal specificity. Note that the PDI is measured species-wise, and the maximal interaction strength of every species is set to 1.\n\nReferences\n\nPoisot, T., Bever, J.D., Nemri, A., Thrall, P.H., Hochberg, M.E., 2011. A conceptual framework for the evolution of ecological specialisation. Ecol. Lett. 14, 841–851. https://doi.org/10.1111/j.1461-0248.2011.01645.x\n\nPoisot, T., Canard, E., Mouquet, N., Hochberg, M.E., 2012. A comparative study of ecological specialization estimators. Methods in Ecology and Evolution 3, 537–544. https://doi.org/10.1111/j.2041-210X.2011.00174.x\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Modularity-1","page":"Modularity","title":"Modularity","text":"","category":"section"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"The analysis of network modularity is done in three steps:","category":"page"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"generate a starting point, using one of the starter functions\noptimize modularity\nanalyse the output","category":"page"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"All starter functions take a network as input, and return a tuple of this network and a dictionary where every species maps onto its module. This forms the input of all other modularity related functions.","category":"page"},{"location":"properties/modularity/#Measures-1","page":"Modularity","title":"Measures","text":"","category":"section"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"Q\nQr","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.Q","page":"Modularity","title":"EcologicalNetworks.Q","text":"Q(N::T, L::Dict{E,Int64}) where {T<:AbstractEcologicalNetwork,E}\n\nModularity of a network and its partition. The second argument is a dictionary where every species of N is associated to an Int64 value representing the identity of the module. This function returns the same value of bipartite networks and their unipartite projection.\n\nReferences\n\nBarber, M.J., 2007. Modularity and community detection in bipartite networks. Phys. Rev. E 76, 066102. https://doi.org/10.1103/PhysRevE.76.066102\n\nNewman, M.E., 2006. Modularity and community structure in networks. Proceedings of the national academy of sciences 103, 8577–8582.\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.Qr","page":"Modularity","title":"EcologicalNetworks.Qr","text":"Qr(N::T, L::Dict{E,Int64}) where {T<:AbstractEcologicalNetwork,E}\n\nRealized modularity – this function returns a value giving the proportion of all links that are within the same module. Higher values reflect a more strongly modular partition (whereas Q represents the deviation of modularity from the random expectation).\n\nReferences\n\nPoisot, T., 2013. An a posteriori measure of network modularity. F1000Research\n\nhttps://doi.org/10.12688/f1000research.2-130.v3\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Starters-1","page":"Modularity","title":"Starters","text":"","category":"section"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"n_random_modules\neach_species_its_module\nlp","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.n_random_modules","page":"Modularity","title":"EcologicalNetworks.n_random_modules","text":"n_random_modules(n::Int64)\n\nThis returns a function which, when applied to a network, will randomly assign every species to one of n modules. The correct way to apply this function to a network N is, therefore n_random_modules(4)(N) (with four modules).\n\nReferences\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.each_species_its_module","page":"Modularity","title":"EcologicalNetworks.each_species_its_module","text":"each_species_its_module(N::T) where {T<:AbstractEcologicalNetwork}\n\nReturns a dictionary in which each species is its own module. This is used as a starting point for lp and salp internally. This is often a very poor starting point for brim, and should probably not be used on its own.\n\nReferences\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.lp","page":"Modularity","title":"EcologicalNetworks.lp","text":"lp(N::T) where {T<:AbstractEcologicalNetwork}\n\nUses label propagation to generate a first approximation of the modular structure of a network. This is usually followed by the BRIM (brim) method. This method supposedly performs better for large graphs, but we rarely observed any differences between it and variations of BRIM alone on smaller graphs.\n\nReferences\n\nLiu, X., Murata, T., 2009. Community Detection in Large-Scale Bipartite Networks, in: 2009 IEEE/WIC/ACM International Joint Conference on Web Intelligence and Intelligent Agent Technology. Institute of Electrical & Electronics Engineers (IEEE). https://doi.org/10.1109/wi-iat.2009.15\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Optimizers-1","page":"Modularity","title":"Optimizers","text":"","category":"section"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"brim\nsalp","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.brim","page":"Modularity","title":"EcologicalNetworks.brim","text":"brim(N::NT, L::Dict{E,Int64}) where {NT<:AbstractEcologicalNetwork,E}\n\nUses BRIM to optimize the modularity of an ecological network. The L argument is a dictionary mapping every species in the network to its module. This function returns a tuple of the network and its module assignment.\n\nReferences\n\nBarber, M.J., 2007. Modularity and community detection in bipartite networks. Phys. Rev. E 76, 066102. https://doi.org/10.1103/PhysRevE.76.066102\n\nNewman, M.E., 2006. Modularity and community structure in networks. Proceedings of the national academy of sciences 103, 8577–8582.\n\nThébault, E., 2013. Identifying compartments in presence–absence matrices and bipartite networks: insights into modularity measures. Journal of Biogeography 40, 759–768. https://doi.org/10.1111/jbi.12015\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#EcologicalNetworks.salp","page":"Modularity","title":"EcologicalNetworks.salp","text":"salp(N::T; θ::Float64=1.0, steps::Int64=10_000, λ::Float64=0.999, progress::Bool=false) where {T <: BipartiteNetwork}\n\nLabel-propagation using simulated annealing. This function uses simulated annealing to propagate labels from neighboring nodes. It accepts a network as input. The schedule of the simulated annealing is linear: at step k+1, the temperature is θλᵏ. The initial temperature has been picked so that after 100 timesteps, using the default λ, a move decreasing modularity by 0.05 (20% of the theoretical maximum) is picked with a probability of 0.1.\n\nOptional arguments regulating the behavior of the simulated annealing routine are:\n\nλ=0.999, the rate of temperature decay\nθ=0.002, the initial temperature\nsteps=10_000, the number of annealing steps to perform\nprogress=false, whether to display an info message every 100 timesteps\n\nThe θ parameter can be picked using the following method: if we want to allow a maximal loss of modularity of δ, after timestep k, with a decay parameter λ, with a probability P, then θ = -δ/[λᵏ×ln(P)]⁻¹. By beibg more or less restrictive on these parameters, the user can pick a value of θ for every problem.\n\nThis function can work as a first step (like lp), but in explorations during the development of the package, we found that brim was rarely (if ever) able to optmize the output further. It can therefore be used on its own.\n\n\n\n\n\n","category":"function"},{"location":"properties/modularity/#Functional-roles-1","page":"Modularity","title":"Functional roles","text":"","category":"section"},{"location":"properties/modularity/#","page":"Modularity","title":"Modularity","text":"functional_cartography","category":"page"},{"location":"properties/modularity/#EcologicalNetworks.functional_cartography","page":"Modularity","title":"EcologicalNetworks.functional_cartography","text":"functional_cartography(N::T, L::Dict{E,Int64}) where {T<:BinaryNetwork, E}\n\nThis function will take the output of a modularity analysis (i.e. a network and a partition), and return a dictionary where every species is associated to its functional role, as defined in Olesen et al (2005). The first element is the within-module degree z-score, and the second is the participation coefficient.\n\nReferences\n\nGuimerà, R., Amaral, L.A.N., 2005. Cartography of complex networks: modules and universal roles. Journal of Statistical Mechanics: Theory and Experiment 2005, P02001. https://doi.org/10.1088/1742-5468/2005/02/P02001\n\nGuimerà, R., Nunes Amaral, L.A., 2005. Functional cartography of complex metabolic networks. Nature 433, 895–900. https://doi.org/10.1038/nature03288\n\nOlesen, J.M., Bascompte, J., Dupont, Y.L., Jordano, P., 2007. The modularity of pollination networks. Proceedings of the National Academy of Sciences 104, 19891–19896. https://doi.org/10.1073/pnas.0706375104\n\n\n\n\n\n","category":"function"},{"location":"properties/nestedness/#Nestedness-1","page":"Nestedness","title":"Nestedness","text":"","category":"section"},{"location":"properties/nestedness/#","page":"Nestedness","title":"Nestedness","text":"η\nnodf","category":"page"},{"location":"properties/nestedness/#EcologicalNetworks.η","page":"Nestedness","title":"EcologicalNetworks.η","text":"η(N::T, dims::Union{Nothing,Integer}=nothing) where {T <: Union{BipartiteNetwork, BipartiteProbaNetwork}}\n\nReturns the nestedness of a margin of the network, using η. The second argument can be 1 (for nestedness of rows/top level) or 2 (for nestedness of columns/bottom level). Leaving it at nothing will measure the nestedness of the entire network.\n\nReferences\n\nBastolla, U., Fortuna, M.A., Pascual-García, A., Ferrera, A., Luque, B., Bascompte, J., 2009. The architecture of mutualistic networks minimizes competition and increases biodiversity. Nature 458, 1018–1020. https://doi.org/10.1038/nature07950\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/nestedness/#EcologicalNetworks.nodf","page":"Nestedness","title":"EcologicalNetworks.nodf","text":"nodf(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: Union{BipartiteNetwork,BipartiteQuantitativeNetwork}}\n\nReturns nodf for a margin of the network. The i argument can be 1 for top-level, 2 for bottom level, and the function will throw an ArgumentError if an invalid value is used. For quantitative networks, WNODF is used.\n\nReferences\n\nAlmeida-Neto, M., Guimarães, P.R., Loyola, R.D., Ulrich, W., 2008. A consistent metric for nestedness analysis in ecological systems: reconciling concept and measurement. Oikos 117, 1227–1239. https://doi.org/10.1111/j.0030-1299.2008.16644.x\n\nAlmeida-Neto, M., Ulrich, W., 2011. A straightforward computational approach for measuring nestedness using quantitative matrices. Environmental Modelling & Software 26, 173–178. https://doi.org/10.1016/j.envsoft.2010.08.003\n\n\n\n\n\n","category":"function"},{"location":"properties/motifs/#Motif-enumeration-1","page":"Motifs","title":"Motif enumeration","text":"","category":"section"},{"location":"properties/motifs/#List-of-canonical-motifs-1","page":"Motifs","title":"List of canonical motifs","text":"","category":"section"},{"location":"properties/motifs/#","page":"Motifs","title":"Motifs","text":"unipartitemotifs","category":"page"},{"location":"properties/motifs/#EcologicalNetworks.unipartitemotifs","page":"Motifs","title":"EcologicalNetworks.unipartitemotifs","text":"unipartitemotifs()\n\nThe names of the motifs come from Stouffer et al. (2007) – especially Fig. 1, available online at http://rspb.royalsocietypublishing.org/content/274/1621/1931.figures-only\n\nThe motifs are returned as a named tuple, with every motif identified by its name in the original publication. The species are named :a. :b, and :c.\n\n\n\n\n\n","category":"function"},{"location":"properties/motifs/#Motif-counting-1","page":"Motifs","title":"Motif counting","text":"","category":"section"},{"location":"properties/motifs/#","page":"Motifs","title":"Motifs","text":"find_motif","category":"page"},{"location":"properties/motifs/#EcologicalNetworks.find_motif","page":"Motifs","title":"EcologicalNetworks.find_motif","text":"find_motif(N::T1, m::T2) where {T1<:AbstractEcologicalNetwork, T2<:BinaryNetwork}\n\nReturns an array of tuples, in which each tuple contains the species that are part of the motif. The length of the array gives the number of times the motif was found. For probabilistic networks, the tuple also contains the probability of observing the species in the correct conformation for the motif, as well as the variance.\n\nReferences\n\nMilo, R., Shen-Orr, S., Itzkovitz, S., Kashtan, N., Chklovskii, D., Alon, U.,\n\nNetwork motifs: simple building blocks of complex networks. Science 298,\n\n824–7. https://doi.org/10.1126/science.298.5594.824\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/motifs/#Probabilistic-case-1","page":"Motifs","title":"Probabilistic case","text":"","category":"section"},{"location":"properties/motifs/#","page":"Motifs","title":"Motifs","text":"expected_motif_count","category":"page"},{"location":"properties/motifs/#EcologicalNetworks.expected_motif_count","page":"Motifs","title":"EcologicalNetworks.expected_motif_count","text":"expected_motif_count(s)\n\nGet the expected number of motifs (and variance) from the output of find_motif on a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#Paths-and-centrality-1","page":"Centrality and paths","title":"Paths and centrality","text":"","category":"section"},{"location":"properties/paths/#Number-of-paths-and-shortest-path-1","page":"Centrality and paths","title":"Number of paths and shortest path","text":"","category":"section"},{"location":"properties/paths/#","page":"Centrality and paths","title":"Centrality and paths","text":"number_of_paths\nshortest_path\nbellman_ford","category":"page"},{"location":"properties/paths/#EcologicalNetworks.number_of_paths","page":"Centrality and paths","title":"EcologicalNetworks.number_of_paths","text":"number_of_paths(N::Unipartite; n::Int64=2)\n\nThis returns an array, not a network.\n\nn (def. 2), the path length\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.shortest_path","page":"Centrality and paths","title":"EcologicalNetworks.shortest_path","text":"shortest_path(N::UnipartiteNetwork; nmax::Int64=50)\n\nThis is not an optimal algorithm at all, but it will do given that most ecological networks are relatively small. The optional nmax argument is the longest shortest path length you will look for.\n\nIn ecological networks, the longest shortest path tends not to be very long, so any value above 10 is probably overdoing it. Note that the default value is 50, which is above 10.\n\n\n\n\n\nshortest_path(N::UnipartiteQuantiNetwork; nmax::Int64=50)\n\nThis function will remove quantitative information, then measure the shortest path length.\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.bellman_ford","page":"Centrality and paths","title":"EcologicalNetworks.bellman_ford","text":"bellman_ford(N::T, source::K) where {T <: DeterministicNetwork, K}\n\nBellman-Ford algorithm to return the shortest / easiest paths from a source species. Refer to the bellman_ford global documentation for the output format.\n\n\n\n\n\nbellman_ford(N::T) where {T <: DeterministicNetwork}\n\nBellman-ford algorithm to return the shortest / easiest paths between all pairs of species in the networks, as long as paths exists. This function will return a tuple, with fields from, to and weight. The number of elements in the tuple is the number of paths. This function works with quantitative and binary networks, and assumes that no interactions are negative.\n\nCurrently, the Bellman-Ford algorithm is slower than the shortest_path function, but the arguments are returned in a more usable way. Note that the speed penalty is only valid when measuring the shortest paths in the entire network (and will be fixed relatively soon), and does not apply as much for the shortest paths from a single source node.\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#Centrality-measures-1","page":"Centrality and paths","title":"Centrality measures","text":"","category":"section"},{"location":"properties/paths/#","page":"Centrality and paths","title":"Centrality and paths","text":"centrality_degree\ncentrality_closeness\ncentrality_katz","category":"page"},{"location":"properties/paths/#EcologicalNetworks.centrality_degree","page":"Centrality and paths","title":"EcologicalNetworks.centrality_degree","text":"centrality_degree(N::UnipartiteNetwork)\n\nDegree centrality, corrected by the maximum degree (the most central species has a degree of 1).\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.centrality_closeness","page":"Centrality and paths","title":"EcologicalNetworks.centrality_closeness","text":"centrality_closeness(N::UnipartiteNetwork; nmax::Int64=100)\n\nThe function calls shortest_path internally – the nmax argument is the maximal path length that wil be tried.\n\nBavelas, A., 1950. Communication Patterns in Task‐Oriented Groups. The Journal of the Acoustical Society of America 22, 725–730. doi:10.1121/1.1906679\n\n\n\n\n\n","category":"function"},{"location":"properties/paths/#EcologicalNetworks.centrality_katz","page":"Centrality and paths","title":"EcologicalNetworks.centrality_katz","text":"centrality_katz(N::Unipartite; a::Float64=0.1, k::Int64=5)\n\nThis measure can work on different path length (k), and give a different weight to every subsequent connection (a). k must be at least 1 (only immediate neighbors are considered). a (being a weight), must be positive.\n\nKatz, L., 1953. A new status index derived from sociometric analysis. Psychometrika 18, 39–43. doi:10.1007/bf02289026\n\n\n\n\n\n","category":"function"},{"location":"properties/overlap/#Measures-of-overlap-1","page":"Overlap and similarity","title":"Measures of overlap","text":"","category":"section"},{"location":"properties/overlap/#","page":"Overlap and similarity","title":"Overlap and similarity","text":"overlap\nAJS\nEAJS","category":"page"},{"location":"properties/overlap/#EcologicalNetworks.overlap","page":"Overlap and similarity","title":"EcologicalNetworks.overlap","text":"overlap(N::T; dims=dims::Union{Nothing,Integer}=nothing) where {T <: BipartiteNetwork}\n\nReturns the overlap graph for a bipartite network. The dims keyword argument can be 1 (default; overlap between top-level species) or 2 (overlap between bottom-level species). See the documentation for ?overlap for the output format.\n\n\n\n\n\noverlap(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nReturns the overlap graph for a unipartite network. The dims keyword argument can be 1 (overlap based on preys) or 2 (overlap based on predators), or nothing (default; overlap based on both predators and preys). The overlap is returned as a vector of named tuples, with elements pair (a tuple of species names), and overlap (the number of shared interactors). The ordering within the pair of species is unimportant, since overlap graphs are symetrical.\n\n\n\n\n\n","category":"function"},{"location":"properties/overlap/#EcologicalNetworks.AJS","page":"Overlap and similarity","title":"EcologicalNetworks.AJS","text":"AJS(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nAdditive Jaccard Similarity for pairs of species in the network. AJS varies between 0 (no common species) to 1 (same profiles). This function can be used to measure AJS based on only successors or predecessors, using the dims argument.\n\nNote that this function uses all direct preys and predators to measure the similarity (and so does not go beyond the immediate neighbors).\n\nReferences\n\nGao, P., Kupfer, J.A., 2015. Uncovering food web structure using a novel trophic similarity measure. Ecological Informatics 30, 110–118. https://doi.org/10.1016/j.ecoinf.2015.09.013\n\n\n\n\n\n","category":"function"},{"location":"properties/overlap/#EcologicalNetworks.EAJS","page":"Overlap and similarity","title":"EcologicalNetworks.EAJS","text":"EAJS(N::T; dims::Union{Nothing,Integer}=nothing) where {T <: UnipartiteNetwork}\n\nExtended Additive Jaccard Similarity for pairs of species in the network. AJS varies between 0 (no common species) to 1 (same profiles). This function can be used to measure AJS based on only successors or predecessors, using the dims argument.\n\nNote that this function counts all interactions up to a distance of 50 to define the neighbourhood of a species. This should be more than sufficient for most ecological networks.\n\nReferences\n\nGao, P., Kupfer, J.A., 2015. Uncovering food web structure using a novel trophic similarity measure. Ecological Informatics 30, 110–118. https://doi.org/10.1016/j.ecoinf.2015.09.013\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#Null-models-1","page":"Null models","title":"Null models","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"Randomization of networks is mostly used to perform null hypothesis significance testing, or to draw random realizations of a probabilistic network. There are two ways to perform networks randomization: either by shuffling interactions within the networks while enforcing some constraints (shuffle) or by drawing random samples from a probabilistic network (rand).","category":"page"},{"location":"properties/nullmodels/#Draw-a-network-from-a-probabilistic-network-1","page":"Null models","title":"Draw a network from a probabilistic network","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"rand","category":"page"},{"location":"properties/nullmodels/#Base.rand","page":"Null models","title":"Base.rand","text":"rand(N::ProbabilisticNetwork)\n\nConverts a probabilistic network into a deterministic one by performing random draws. All interactions are treated as independent Bernoulli events. Note that this network is not check for degeneracy, i.e. species can end up with no interactions.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\nrand(N::ProbabilisticNetwork, n::T) where {T<:Integer}\n\nGenerates a number of random deterministic networks based on a probabilistic network.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\nrand(N::ProbabilisticNetwork, S::Tuple{Int64,Int64})\n\nGenerates a number of random deterministic networks based on a probabilistic network, and returns them as a matrix.\n\nReferences\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#Generate-probabilistic-networks-from-deterministic-networks-1","page":"Null models","title":"Generate probabilistic networks from deterministic networks","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"These functions generate a probabilistic network from a deterministic network, where the probability of every interaction is determined by the degree distribution (or connectance) of the network.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"null1\nnull2\nnull3in\nnull3out","category":"page"},{"location":"properties/nullmodels/#EcologicalNetworks.null1","page":"Null models","title":"EcologicalNetworks.null1","text":"null1(N::BinaryNetwork)\n\nGiven a network N, null1(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the connectance of N.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nFortuna, M.A., Bascompte, J., 2006. Habitat loss and the structure of plantanimal mutualistic networks. Ecol. Lett. 9, 281–286. https://doi.org/10.1111/j.1461-0248.2005.00868.x\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#EcologicalNetworks.null2","page":"Null models","title":"EcologicalNetworks.null2","text":"null2(N::BinaryNetwork)\n\nGiven a network N, null2(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the degree of each species.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nBascompte, J., Jordano, P., Melian, C.J., Olesen, J.M., 2003. The nested assembly of plant-animal mutualistic networks. PNAS 100, 9383–9387. https://doi.org/10.1073/pnas.1633576100\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#EcologicalNetworks.null3in","page":"Null models","title":"EcologicalNetworks.null3in","text":"null3in(N::BinaryNetwork)\n\nGiven a network N, null3in(N) returns a matrix with the same dimensions, where every interaction happens with a probability equal to the in-degree (number of predecessors) of each species, divided by the total number of possible predecessors.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nPoisot, T., Stanko, M., Miklisová, D., Morand, S., 2013. Facultative and obligate parasite communities exhibit different network properties. Parasitology 140, 1340–1345. https://doi.org/10.1017/S0031182013000851\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#EcologicalNetworks.null3out","page":"Null models","title":"EcologicalNetworks.null3out","text":"null3out(N::BinaryNetwork)\n\nGiven a network N, null3out(N) returns a network with the same dimensions, where every interaction happens with a probability equal to the out-degree (number of successors) of each species, divided by the total number of possible successors.\n\nNote that this does not guarantee that the network is not degenerate, so the output of this analysis should be filtered using is_degenerate, or passed to simplify. The output of this approach is always a probabilistic network of the same partiteness as the original network.\n\nReferences\n\nPoisot, T., Stanko, M., Miklisová, D., Morand, S., 2013. Facultative and obligate parasite communities exhibit different network properties. Parasitology 140, 1340–1345. https://doi.org/10.1017/S0031182013000851\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#Shuffle-interactions-1","page":"Null models","title":"Shuffle interactions","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"shuffle!\nshuffle","category":"page"},{"location":"properties/nullmodels/#Generate-structural-network-models-1","page":"Null models","title":"Generate structural network models","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"Structure of ecological networks is non-random. Network architecture can have a strong effect on important ecosystem properties (Mougi and Kondoh 2012, Thébault and Fontaine 2010). Many of the structural features of food-webs can be simulated using small number of simple rules. Despite this simplicity these models can often accurately reproduce some of the second order characteristics of empirical food-webs (Stouffer et al. 2005). These characteristics of phenomenological stochastic models allow for their wide applications e.g. to simulate biomass dynamics using dynamical models or study extinction cascades.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"Mougi, A. and Kondoh, M. (2012) ‘Diversity of Interaction Types and Ecological Community Stability’, Science, 337(6092), pp. 349–351. doi: 10.1126/science.1220529. Thébault, E. and Fontaine, C. (2010) ‘Stability of Ecological Communities and the Architecture of Mutualistic and Trophic Networks’, Science, 329(5993), pp. 853–856. doi: 10.1126/science.1188321. Stouffer, D. B. et al. (2005) ‘Quantitative Patterns in the Structure of Model and Empirical Food Webs’, Ecology, 86(5), pp. 1301–1311. doi: 10.1890/04-0957.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"Many models with various interactions assignment algorithms have been proposed. EcologicalNetworks provides functions to generate random ecological networks of the UnipartiteNetwork type. Listed below are those most often used in ecological studies.","category":"page"},{"location":"properties/nullmodels/#Cascade-model-1","page":"Null models","title":"Cascade model","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"This model uses one abstract trophic trait. For any given consumer links can be randomly assigned to a resource species with the trait value smaller than that of a consumer.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"cascademodel","category":"page"},{"location":"properties/nullmodels/#EcologicalNetworks.cascademodel","page":"Null models","title":"EcologicalNetworks.cascademodel","text":"cascademodel(S::Int64, Co::Float64)\n\nReturn matrix of the type UnipartiteNetwork randomly assembled according to the cascade model for a given nuber of S and connectivity Co.\n\nSee also: nichemodel, mpnmodel, nestedhierarchymodel\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\ncascademodel(N::T) where {T <: UnipartiteNetwork}\n\nApplied to a UnipartiteNetwork return its randomized version.\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\ncascademodel(S::Int64, L::Int64)\n\nNumber of links can be specified instead of connectance.\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\ncascademodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (S::Int64, Co::Float64) or (S::Int64, L::Int64).\n\nReferences\n\nCohen, J.E., Newman, C.M., 1985. A stochastic theory of community food webs I. Models and aggregated data. Proceedings of the Royal Society of London. Series B. Biological Sciences 224, 421–448. https://doi.org/10.1098/rspb.1985.0042\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#Niche-model-1","page":"Null models","title":"Niche model","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"Niche model extended cascade model by introducing ranges for each consumer. In this model consumers can predate on resources which trait values are within the predators' 'niche' range.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"nichemodel","category":"page"},{"location":"properties/nullmodels/#EcologicalNetworks.nichemodel","page":"Null models","title":"EcologicalNetworks.nichemodel","text":"nichemodel(S::Int64, L::Int64)\n\nReturn UnipartiteNetwork where resources are assign to consumers according to niche model for a network of S species and L links.\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\nnichemodel(N::T) where {T <: UnipartiteNetwork}\n\nApplied to empirical UnipartiteNetwork return its randomized version.\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\nnichemodel(S::Int64, C::Float64)\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\nnichemodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (Species::Int64, Co::Float64) or (Species::Int64, Int::Int64).\n\nReferences\n\nWilliams, R., Martinez, N., 2000. Simple rules yield complex food webs. Nature 404, 180–183.\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#Nested-hierarchy-model-1","page":"Null models","title":"Nested hierarchy model","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"In order to reproduce more faithfully properties of complex and multidimensional natural nested hierarchy model tries to use simple rules to incorporate also the phylogenetic similarity in resource composition of predators.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"nestedhierarchymodel","category":"page"},{"location":"properties/nullmodels/#EcologicalNetworks.nestedhierarchymodel","page":"Null models","title":"EcologicalNetworks.nestedhierarchymodel","text":"nestedhierarchymodel(S::Int64, L::Int64)\n\nReturn UnipartiteNetwork where resources are assigned to consumers according to the nested hierarchy model for S species and L.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\nnestedhierarchymodel(S::Int64, Co::Float64)\n\nConnectance can be provided instead of number of links.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\nnestedhierarchymodel(N::T) {T <: UnipartiteNetwork}\n\nApplied to empirical UnipartiteNetwork return its randomized version.\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\nnestedhierarchymodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (Species::Int64, Co::Float64) or (Species::Int64, Int::Int64).\n\nReferences\n\nCattin, M.-F., Bersier, L.-F., Banašek-Richter, C., Baltensperger, R., Gabriel, J.-P., 2004. Phylogenetic constraints and adaptation explain food-web structure. Nature 427, 835–839. https://doi.org/10.1038/nature02327\n\n\n\n\n\n","category":"function"},{"location":"properties/nullmodels/#Minimum-potential-niche-model-1","page":"Null models","title":"Minimum potential niche model","text":"","category":"section"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"This model attempts to explicitly simulate forbidden links in empirical food webs.","category":"page"},{"location":"properties/nullmodels/#","page":"Null models","title":"Null models","text":"mpnmodel","category":"page"},{"location":"properties/nullmodels/#EcologicalNetworks.mpnmodel","page":"Null models","title":"EcologicalNetworks.mpnmodel","text":"mpnmodel(S::Int64, Co::Float64, forbidden::Float64)\n\nReturn UnipartiteNetwork with links assigned according to minimum potential niche model for given number of S, connectivity Co and probability of forbidden link occurence.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\nmpnmodel(N::T) where {T<: UnipartiteNetwork}\n\nApplied to UnipartiteNetwork return its randomized version.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\nmpnmodel(parameters::Tuple)\n\nParameters tuple can also be provided in the form (S::Int64, Co::Float64, forbidden::Float64).\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\nmpnmodel(mpnmodel(S::Int64, L::Int64, forbidden::Float64))\n\nAverage number of links can be specified instead of connectance.\n\nReferences\n\nAllesina, S., Alonso, D., Pascual, M., 2008. A General Model for Food Web Structure. Science 320, 658–661. https://doi.org/10.1126/science.1156269\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Indices-based-on-information-theory-1","page":"Information theory","title":"Indices based on information theory","text":"","category":"section"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"Indices based on information theory, such as entropy, mutual information etc, can easily be computed. To this end, the ecological network is transformed in a bivariate distribution. This is done by normalizing the adjacency or incidence matrix to obtain a doubly stochastic matrix. The information theoretic indices are computed either from this matrix or directly from the ecological network. Note that when using an array is input, the functions do not perform any checks whether the matrix is normalized and nonnegative. When the input is an ecological network, the functions automatically convert the network to a normalized probability matrix.","category":"page"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"One can compute individual indices or use the function information_decomposition which performs the entire decomposition at once.","category":"page"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"Indices can be calculated for the joint distribution, as well as for the marginal distributions of the two trophic levels (if applicable), by changing an optional argument dim=1 of the function.","category":"page"},{"location":"properties/information/#Network-conversion-1","page":"Information theory","title":"Network conversion","text":"","category":"section"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"make_joint_distribution","category":"page"},{"location":"properties/information/#EcologicalNetworks.make_joint_distribution","page":"Information theory","title":"EcologicalNetworks.make_joint_distribution","text":"make_joint_distribution(N::NT) where {NT<:AbstractEcologicalNetwork}\n\nReturns a double stochastic matrix from the adjacency or incidence matrix. Raises an error if the matrix contains negative values. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Indices-1","page":"Information theory","title":"Indices","text":"","category":"section"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"entropy\nconditional_entropy\nmutual_information\nvariation_information\npotential_information\ndiff_entropy_uniform","category":"page"},{"location":"properties/information/#EcologicalNetworks.entropy","page":"Information theory","title":"EcologicalNetworks.entropy","text":"entropy(P::AbstractArray)\n\nComputes the joint entropy of a double stochastic matrix. Does not perform any checks whether the matrix is normalized. Output in bits.\n\n\n\n\n\nentropy(P::AbstractArray, dims::I)\n\nComputes the marginal entropy of a double stochastic matrix. dims indicates whether to compute the entropy for the rows (dims=1) or columns (dims=2). Does not perform any checks whether the matrix is normalized. Output in bits.\n\n\n\n\n\nentropy(N::AbstractEcologicalNetwork)\n\nComputes the joint entropy of an ecological network. Output in bits.\n\n\n\n\n\nentropy(N::AbstractEcologicalNetwork, dims::I)\n\nComputes the marginal entropy of an ecological network. dims indicates whether to compute the entropy for the rows (dims=1) or columns (dims=2). Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.conditional_entropy","page":"Information theory","title":"EcologicalNetworks.conditional_entropy","text":"conditional_entropy(P::AbstractArray, given::I)\n\nComputes the conditional entropy of double stochastic matrix. If given = 1, it is the entropy of the columns, and visa versa when given = 2. Output in bits.\n\n\n\n\n\nconditional_entropy(N::AbstractEcologicalNetwork, given::I)\n\nComputes the conditional entropy of an ecological network. If given = 1, it is the entropy of the columns, and visa versa when given = 2.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.mutual_information","page":"Information theory","title":"EcologicalNetworks.mutual_information","text":"mutual_information(P::AbstractArray)\n\nComputes the mutual information of a double stochastic matrix. Output in bits.\n\n\n\n\n\nmutual_information(N::NT) where {NT<:AbstractEcologicalNetwork}\n\nComputes the mutual information of an ecological network. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.variation_information","page":"Information theory","title":"EcologicalNetworks.variation_information","text":"variation_information(P::AbstractArray)\n\nComputes the variation of information of a double stochastic matrix. Output in bits.\n\n\n\n\n\nvariation_information(N::AbstractEcologicalNetwork)\n\nComputes the variation of information of an ecological network. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.potential_information","page":"Information theory","title":"EcologicalNetworks.potential_information","text":"potential_information(N::NT)\n\nComputes the maximal potential information in a network, corresponding to every species interacting with every other species. Compute result for the marginals using the optional parameter dims. Output in bits.\n\n\n\n\n\npotential_information(N::NT, dims::I)\n\nComputes the maximal potential information in a network, corresponding to every species interacting with every other species. Compute result for the marginals using the optional parameter dims. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#EcologicalNetworks.diff_entropy_uniform","page":"Information theory","title":"EcologicalNetworks.diff_entropy_uniform","text":"diff_entropy_uniform(P::AbstractArray)\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\ndiff_entropy_uniform(P::AbstractArray, dims::I)\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\ndiff_entropy_uniform(N::AbstractEcologicalNetwork, dims::I=nothing)\n\nComputes the difference in entropy of the marginals compared to the entropy of an uniform distribution. The parameter dims indicates which marginals are used, with both if no value is provided. Output in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Decomposition-1","page":"Information theory","title":"Decomposition","text":"","category":"section"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"information_decomposition","category":"page"},{"location":"properties/information/#EcologicalNetworks.information_decomposition","page":"Information theory","title":"EcologicalNetworks.information_decomposition","text":"information_decomposition(N::AbstractEcologicalNetwork; norm::Bool=false, dims::I=nothing)\n\nPerforms an information theory decomposition of a given ecological network, i.e. the information content in the normalized adjacency matrix is split in:\n\n:D : difference in entropy of marginals compared to an uniform distribition\n:I : mutual information\n:V : variation of information / conditional entropy\n\nIf norm=true, the components are normalized such that their sum is equal to 1. One can optinally give the dimision, indicating whether to compute the indices for the rows (dims=1), columns (dims=2) or the whole matrix (default).\n\nResult is returned in a Dict. Outputs in bits.\n\n\n\n\n\n","category":"function"},{"location":"properties/information/#Effective-interactions-1","page":"Information theory","title":"Effective interactions","text":"","category":"section"},{"location":"properties/information/#","page":"Information theory","title":"Information theory","text":"convert2effective","category":"page"},{"location":"properties/information/#EcologicalNetworks.convert2effective","page":"Information theory","title":"EcologicalNetworks.convert2effective","text":"convert2effective(indice::Real)\n\nConvert an information theory indices in an effective number (i.e. number of corresponding interactions).\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Network-β-diversity-1","page":"Beta-diversity","title":"Network β-diversity","text":"","category":"section"},{"location":"properties/betadiversity/#","page":"Beta-diversity","title":"Beta-diversity","text":"Measures of β-diversity work by first calculating the unique/shared items (using the βs, βos, and βwn functions), then passing on these arguments to one of the KGLXX functions to return a (dis)similarity score. The KGL functions are named for Koleff, Gaston, and Lennon – the number of each function matches the number in Table 1.","category":"page"},{"location":"properties/betadiversity/#β-diversity-components-1","page":"Beta-diversity","title":"β-diversity components","text":"","category":"section"},{"location":"properties/betadiversity/#","page":"Beta-diversity","title":"Beta-diversity","text":"The package implements functions for the βs, βos, and βwn components of network dissimilarity. In the original publication, we also described βst, which was the proprotion of dissimilarity due to species turnover, and defined as βst = βwn - βos for measures of dissimilarity bounded between 0 and 1. After discussing with colleagues and considering our own use-cases, it appears that the interpretation of βst is not always straightforward, and so we have decided to exclude it form the available functions.","category":"page"},{"location":"properties/betadiversity/#","page":"Beta-diversity","title":"Beta-diversity","text":"βs\nβos\nβwn","category":"page"},{"location":"properties/betadiversity/#EcologicalNetworks.βs","page":"Beta-diversity","title":"EcologicalNetworks.βs","text":"βs(X::T, Y::T) where {T<:BinaryNetwork}\n\nComponents of β-diversity as measured on species.\n\nReferences\n\nKoleff, P., Gaston, K.J., Lennon, J.J., 2003. Measuring beta diversity for presence–absence data. Journal of Animal Ecology 72, 367–382. https://doi.org/10.1046/j.1365-2656.2003.00710.x\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#EcologicalNetworks.βos","page":"Beta-diversity","title":"EcologicalNetworks.βos","text":"βos(X::T, Y::T) where {T<:BipartiteNetwork}\n\nOverlapping species (bipartite)\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\nβos(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nOverlapping species (unipartite)\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#EcologicalNetworks.βwn","page":"Beta-diversity","title":"EcologicalNetworks.βwn","text":"βwn(X::T, Y::T) where {T<:BinaryNetwork}\n\nWhole network\n\nReferences\n\nCanard, E.F., Mouquet, N., Mouillot, D., Stanko, M., Miklisova, D., Gravel, D.,\n\nEmpirical evaluation of neutral interactions in host-parasite networks.\n\nThe American Naturalist 183, 468–479. https://doi.org/10.1086/675363\n\nPoisot, T., Canard, E., Mouillot, D., Mouquet, N., Gravel, D., 2012. The dissimilarity of species interaction networks. Ecol. Lett. 15, 1353–1361. https://doi.org/10.1111/ele.12002\n\nPoisot, T., Cirtwill, A.R., Cazelles, K., Gravel, D., Fortin, M.-J., Stouffer, D.B., 2016. The structure of probabilistic networks. Methods in Ecology and Evolution 7, 303–312. https://doi.org/10.1111/2041-210X.12468\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#β-diversity-measures-1","page":"Beta-diversity","title":"β-diversity measures","text":"","category":"section"},{"location":"properties/betadiversity/#","page":"Beta-diversity","title":"Beta-diversity","text":"KGL01","category":"page"},{"location":"properties/betadiversity/#EcologicalNetworks.KGL01","page":"Beta-diversity","title":"EcologicalNetworks.KGL01","text":"KGL01(S::T)\n\nWhittaker\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Basic-operations-on-networks-1","page":"Beta-diversity","title":"Basic operations on networks","text":"","category":"section"},{"location":"properties/betadiversity/#","page":"Beta-diversity","title":"Beta-diversity","text":"Internally, the functions for β-diversity rely on the usual operations on sets. The act of combining two networks, for example, is a union operation.","category":"page"},{"location":"properties/betadiversity/#","page":"Beta-diversity","title":"Beta-diversity","text":"setdiff\nunion\nintersect","category":"page"},{"location":"properties/betadiversity/#Base.setdiff","page":"Beta-diversity","title":"Base.setdiff","text":"setdiff(X::T, Y::T) where {T<:BipartiteNetwork}\n\nDifference between two bipartite networks. This operation is sensitive to the order of arguments, as the resulting network will have the species present in the first network (and their interactions) only.\n\n\n\n\n\nsetdiff(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nDifference between two unipartite networks. This operation is sensitive to the order of arguments, as the resulting network will have the species present in the first network (and their interactions) only.\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Base.union","page":"Beta-diversity","title":"Base.union","text":"union(X::T, Y::T) where {T<:BipartiteNetwork}\n\nUnion of two bipartite networks – interactions and species which are present in either networks are also present in the final network.\n\n\n\n\n\nunion(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nUnion of two unipartite networks – interactions and species which are present in either networks are also present in the final network.\n\n\n\n\n\n","category":"function"},{"location":"properties/betadiversity/#Base.intersect","page":"Beta-diversity","title":"Base.intersect","text":"intersect(X::T, Y::T) where {T<:BipartiteNetwork}\n\nIntersect between two bipartite networks. The resulting network has the species and interactions common to both networks. This can result in species being disconnected, if they are found in both networks but with no operations in common.\n\n\n\n\n\nintersect(X::T, Y::T) where {T<:UnipartiteNetwork}\n\nIntersect between two unipartite networks. The resulting network has the species and interactions common to both networks. This can result in species being disconnected, if they are found in both networks but with no operations in common.\n\n\n\n\n\n","category":"function"},{"location":"plots/#Initial-layouts-1","page":"Plots","title":"Initial layouts","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"initial","category":"page"},{"location":"plots/#EcologicalNetworksPlots.initial","page":"Plots","title":"EcologicalNetworksPlots.initial","text":"Random disposition of nodes\n\n\n\n\n\nRandom disposition of nodes on two levels for bipartite networks\n\n\n\n\n\nRandom disposition of nodes on trophic levels for food webs\n\n\n\n\n\nRandom disposition of nodes on a circle\n\n\n\n\n\n","category":"function"},{"location":"plots/#","page":"Plots","title":"Plots","text":"RandomInitialLayout\nBipartiteInitialLayout\nFoodwebInitialLayout\nCircularInitialLayout","category":"page"},{"location":"plots/#EcologicalNetworksPlots.RandomInitialLayout","page":"Plots","title":"EcologicalNetworksPlots.RandomInitialLayout","text":"RandomInitialLayout\n\nThis type is used to generate an initial layout, where the nodes are placed at random.\n\n\n\n\n\n","category":"type"},{"location":"plots/#EcologicalNetworksPlots.BipartiteInitialLayout","page":"Plots","title":"EcologicalNetworksPlots.BipartiteInitialLayout","text":"BipartiteInitialLayout\n\nThis type is used to generate an initial bipartite layout, where the nodes are placed on two levels, but their horizontal position is random.\n\n\n\n\n\n","category":"type"},{"location":"plots/#EcologicalNetworksPlots.FoodwebInitialLayout","page":"Plots","title":"EcologicalNetworksPlots.FoodwebInitialLayout","text":"FoodwebInitialLayout\n\nThis type is used to generate an initial layout, where the nodes are placed on their trophic levels, but their horizontal position is random.\n\n\n\n\n\n","category":"type"},{"location":"plots/#EcologicalNetworksPlots.CircularInitialLayout","page":"Plots","title":"EcologicalNetworksPlots.CircularInitialLayout","text":"CircularInitialLayout\n\nThis type is used to generate an initial layout, where the nodes are placed at random along a circle.\n\n\n\n\n\n","category":"type"},{"location":"plots/#Layouts-1","page":"Plots","title":"Layouts","text":"","category":"section"},{"location":"plots/#Force-directed-layout-1","page":"Plots","title":"Force-directed layout","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"ForceDirectedLayout","category":"page"},{"location":"plots/#EcologicalNetworksPlots.ForceDirectedLayout","page":"Plots","title":"EcologicalNetworksPlots.ForceDirectedLayout","text":"ForceDirectedLayout\n\n\n\n\n\n","category":"type"},{"location":"plots/#Circular-layout-1","page":"Plots","title":"Circular layout","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"CircularLayout","category":"page"},{"location":"plots/#EcologicalNetworksPlots.CircularLayout","page":"Plots","title":"EcologicalNetworksPlots.CircularLayout","text":"CircularLayout\n\nA circular layout has a single field, radius.\n\n\n\n\n\n","category":"type"},{"location":"plots/#Static-layouts-1","page":"Plots","title":"Static layouts","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"NestedBipartiteLayout","category":"page"},{"location":"plots/#EcologicalNetworksPlots.NestedBipartiteLayout","page":"Plots","title":"EcologicalNetworksPlots.NestedBipartiteLayout","text":"NestedBipartiteLayout\n\nParameters are\n\nalign (whether the two levels should be centered together)\nrelative (whether the two levels should occupy a length equal to their relative richness)\nspread (the distance between the two)\n\nNote that to see the effect of spread, you may have to use aspectratio=1; if not, the spacing between levels will be determined by the dimensions of the plot.\n\n\n\n\n\n","category":"type"},{"location":"plots/#Apply-layout-to-network-1","page":"Plots","title":"Apply layout to network","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"position!","category":"page"},{"location":"plots/#EcologicalNetworksPlots.position!","page":"Plots","title":"EcologicalNetworksPlots.position!","text":"position!(LA::ForceDirectedLayout, L::Dict{K,NodePosition}, N::T) where {T <: EcologicalNetworks.AbstractEcologicalNetwork} where {K}\n\nOne iteration of the force-directed layout routine. Because these algorithms can take some time to converge, it may be useful to stop every 500 iterations to have a look at the results.\n\n\n\n\n\nposition!(LA::CircularLayout, L::Dict{K,NodePosition}, N::T) where {T <: AbstractEcologicalNetwork} where {K}\n\nTODO\n\nReferences\n\nMcGuffin, M.J., 2012. Simple algorithms for network visualization: A tutorial. Tsinghua Science and Technology 17, 383–398. https://doi.org/10.1109/TST.2012.6297585\n\n\n\n\n\n","category":"function"},{"location":"plots/#Examples-1","page":"Plots","title":"Examples","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"using EcologicalNetworks\nusing EcologicalNetworksPlots\nusing Plots","category":"page"},{"location":"plots/#Static-layouts-2","page":"Plots","title":"Static layouts","text":"","category":"section"},{"location":"plots/#Nested-1","page":"Plots","title":"Nested","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Unes = web_of_life(\"M_SD_033\")\nI = initial(BipartiteInitialLayout, Unes)\nposition!(NestedBipartiteLayout(0.4), I, Unes)\nplot(I, Unes, aspectratio=1)\nscatter!(I, Unes, bipartite=true)","category":"page"},{"location":"plots/#Circular-1","page":"Plots","title":"Circular","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Unes = web_of_life(\"M_SD_033\")\nI = initial(CircularInitialLayout, Unes)\nposition!(CircularLayout(), I, Unes)\nplot(I, Unes, aspectratio=1)\nscatter!(I, Unes, bipartite=true)","category":"page"},{"location":"plots/#Dynamic-layouts-1","page":"Plots","title":"Dynamic layouts","text":"","category":"section"},{"location":"plots/#Force-directed-1","page":"Plots","title":"Force directed","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Umod = web_of_life(\"M_PA_003\")\nI = initial(RandomInitialLayout, Umod)\nfor step in 1:4000\n  position!(ForceDirectedLayout(2.5), I, Umod)\nend\nplot(I, Umod, aspectratio=1)\nscatter!(I, Umod, bipartite=true)","category":"page"},{"location":"plots/#Food-web-layout-1","page":"Plots","title":"Food web layout","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Fweb = simplify(nz_stream_foodweb()[5])\nI = initial(FoodwebInitialLayout, Fweb)\nfor step in 1:4000\n  position!(ForceDirectedLayout(true, false, 2.5), I, Fweb)\nend\nplot(I, Fweb)\nscatter!(I, Fweb)","category":"page"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Note that we can replace some properties of the nodes in the layout after the positioning algorithm occurred – so we can, for example, use the actual (instead of fractional) trophic level:","category":"page"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Fweb = simplify(nz_stream_foodweb()[5])\nI = initial(FoodwebInitialLayout, Fweb)\nfor step in 1:4000\n  position!(ForceDirectedLayout(true, false, 2.5), I, Fweb)\nend\ntl = trophic_level(Fweb)\nfor s in species(Fweb)\n  I[s].y = tl[s]\nend\nplot(I, Fweb)\nscatter!(I, Fweb)","category":"page"},{"location":"plots/#Node-properties-1","page":"Plots","title":"Node properties","text":"","category":"section"},{"location":"plots/#Color-1","page":"Plots","title":"Color","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Unes = web_of_life(\"M_SD_033\")\nI = initial(BipartiteInitialLayout, Unes)\nposition!(NestedBipartiteLayout(0.4), I, Unes)\nplot(I, Unes, aspectratio=1)\nscatter!(I, Unes, bipartite=true, nodefill=degree(Unes))","category":"page"},{"location":"plots/#Size-1","page":"Plots","title":"Size","text":"","category":"section"},{"location":"plots/#Advanced-examples-1","page":"Plots","title":"Advanced examples","text":"","category":"section"},{"location":"plots/#","page":"Plots","title":"Plots","text":"One important feature of the package is that the layout can contain more nodes than the network. For example, we can use this to our advantage, to represent species with a degree larger than 3 in red:","category":"page"},{"location":"plots/#","page":"Plots","title":"Plots","text":"Umod = web_of_life(\"M_PA_003\")\nI = initial(RandomInitialLayout, Umod)\nfor step in 1:4000\n  position!(ForceDirectedLayout(2.5), I, Umod)\nend\nplot(I, Umod, aspectratio=1)\nscatter!(I, Umod)\nN = convert(AbstractUnipartiteNetwork, convert(BinaryNetwork, Umod))\ncore3 = collect(keys(filter(p -> p.second ≥ 3, degree(N))))\nplot!(I, N[core3], lc=:red)\nscatter!(I, N[core3], mc=:red)","category":"page"}]
}
